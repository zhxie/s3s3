{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "orange",
    "glyph" : "chart-pie"
  },
  "name" : "s3s3",
  "script" : "\/\/ Configuration.\n\/\/ Your stat.ink API key.\n\/\/ あなたのstat.ink APIキー。\n\/\/ 您的stat.ink API密钥。\n\/\/ 您的stat.ink API密鑰。\nconst API_KEY = \"INPUT_YOUR_TOKEN_HERE\";\n\/\/ Language used in SplatNet 3. Available values for this configuration option are\n\/\/ de-DE, en-GB, en-US, es-ES, es-MX, fr-CA, fr-FR, it-IT, ja-JP, ko-KR, nl-NL, ru-RU, zh-CN and zh-TW.\n\/\/ 日本語の場合はja-JPと入力してください。\n\/\/ 如果您使用简体中文，请填写zh-CN。\n\/\/ 如果您使用繁體中文，請填寫zh-TW。\nconst LANG = \"en-US\";\n\n\/\/ Debug configuration. DO NOT EDIT unless you know what you are doing.\n\/\/ Designated a bullet token to avoid parsing from arguments.\nconst BULLET_TOKEN = \"\" || parseBulletToken();\n\/\/ Run in test mode.\nconst TEST_MODE = false;\n\n\/\/ Check update.\nconst A_VERSION = \"0.0.1\";\nawait checkUpdate();\n\n\/\/ Prepare and configuration check.\nif (API_KEY.length !== 43) {\n  let alert = new Alert();\n  alert.title = \"Invalid stat.ink API Key\";\n  alert.message = \"Your stat.ink API key is invalid. You can get your API key in https:\/\/stat.ink\/profile.\";\n  alert.addCancelAction(\"Quit\");\n  await alert.present();\n  return;\n}\nif (![\"de-DE\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fr-CA\", \"fr-FR\", \"it-IT\", \"ja-JP\", \"ko-KR\", \"nl-NL\", \"ru-RU\", \"zh-CN\", \"zh-TW\"].includes(LANG)) {\n  let alert = new Alert();\n  alert.title = \"Invalid Language\";\n  alert.message = \"Your language is invalid. Please check your configuration.\";\n  alert.addCancelAction(\"Quit\");\n  await alert.present();\n  return;\n}\nif (BULLET_TOKEN.length === 0) {\n  let alert = new Alert();\n  alert.title = \"Invalid Bullet Token\";\n  alert.message = \"Your bullet token is invalid. Please use s3s3 from Mudmouth. See https:\/\/github.com\/zhxie\/s3s3 for more.\";\n  alert.addCancelAction(\"Quit\");\n  await alert.present();\n  return;\n}\nconst SPLATNET_VERSION = await updateSplatnetVersion();\nif (SPLATNET_VERSION.length === 0) {\n  let alert = new Alert();\n  alert.title = \"Cannot Update SplatNet 3 Version\";\n  alert.message = \"s3s3 cannot update SplatNet 3 version. Please check your internet connectivity, then file a bug on https:\/\/github.com\/zhxie\/s3s3\/issues.\";\n  alert.addCancelAction(\"Quit\");\n  await alert.present();\n  return;\n}\n\n\/\/ Fetch uploaded battles.\nconst uploadedBattleIds = await getUploaded(\"s3s\");\n\n\/\/ Fetch latest battles.\n\/\/ TODO: fetch the latest 50 battles in each modes.\nconst battleData = await fetchGraphQl(\"b24d22fd6cb251c515c2b90044039698aa27bc1fab15801d83014d919cd45780\", {});\nconst battleGroups = battleData[\"latestBattleHistories\"][\"historyGroups\"][\"nodes\"];\nconsole.log(`Battle groups: ${battleGroups.length}`);\nfor (const group of battleGroups) {\n  const battleNodes = group[\"historyDetails\"][\"nodes\"];\n  console.log(`Battle nodes: ${battleNodes.length}`);\n  for (const node of battleNodes) {\n    const id = node[\"id\"];\n    console.log(`Battle ID: ${id}`);\n    const uuid = generateUuidV5(\"b3a2dbf5-2c09-4792-b78c-00b548b70aeb\", Data.fromBase64String(id).toRawString().slice(-52));\n    if (uploadedBattleIds.includes(uuid)) {\n      console.log(\"Omit\");\n      continue;\n    }\n\n    const data = await fetchGraphQl(\"f893e1ddcfb8a4fd645fd75ced173f18b2750e5cfba41d2669b9814f6ceaec46\", { vsResultId: id });\n\n    \/\/ Format payload for battle.\n    const battle = data[\"vsHistoryDetail\"];\n    const payload = {};\n\n    \/\/ UUID.\n    payload[\"uuid\"] = uuid;\n\n    \/\/ Mode.\n    const mode = battle[\"vsMode\"][\"mode\"];\n    switch (mode) {\n      case \"REGULAR\":\n        payload[\"lobby\"] = \"regular\";\n        break;\n      case \"BANKARA\":\n        switch (battle[\"bankaraMatch\"][\"mode\"]) {\n          case \"OPEN\":\n            payload[\"lobby\"] = \"bankara_open\";\n            break;\n          case \"CHALLENGE\":\n            payload[\"lobby\"] = \"bankara_challenge\";\n            break;\n        }\n        break;\n      case \"X_MATCH\":\n        payload[\"lobby\"] = \"xmatch\";\n        break;\n      case \"LEAGUE\":\n        payload[\"lobby\"] = \"event\";\n        break;\n      case \"PRIVATE\":\n        payload[\"lobby\"] = \"private\";\n        break;\n      case \"FEST\":\n        switch (decodeBase64Index(battle[\"vsMode\"][\"id\"])) {\n          case 6:\n          case 8:\n            payload[\"lobby\"] = \"splatfest_open\";\n            break;\n          case 7:\n            payload[\"lobby\"] = \"splatfest_challenge\";\n            break;\n        }\n        break;\n    }\n\n    \/\/ Rule.\n    const rule = battle[\"vsRule\"][\"rule\"];\n    switch (rule) {\n      case \"TURF_WAR\":\n        payload[\"rule\"] = \"nawabari\";\n        break;\n      case \"AREA\":\n        payload[\"rule\"] = \"area\";\n        break;\n      case \"LOFT\":\n        payload[\"rule\"] = \"yagura\";\n        break;\n      case \"GOAL\":\n        payload[\"rule\"] = \"hoko\";\n        break;\n      case \"CLAM\":\n        payload[\"rule\"] = \"asari\";\n        break;\n      case \"TRI_COLOR\":\n        payload[\"rule\"] = \"tricolor\";\n        break;\n    }\n\n    \/\/ Stage.\n    payload[\"stage\"] = decodeBase64Index(battle[\"vsStage\"][\"id\"]);\n\n    \/\/ Player and teams.\n    for (let i = 0; i < battle[\"myTeam\"][\"players\"].length; i++) {\n      const player = battle[\"myTeam\"][\"players\"][i];\n      if (player[\"isMyself\"]) {\n        payload[\"weapon\"] = decodeBase64Index(player[\"weapon\"][\"id\"]);\n        payload[\"inked\"] = player[\"paint\"];\n        payload[\"species\"] = player[\"species\"].toLowerCase();\n        payload[\"rank_in_team\"] = i + 1;\n        if (player[\"result\"]) {\n          payload[\"kill_or_assist\"] = player[\"result\"][\"kill\"];\n          payload[\"assist\"] = player[\"result\"][\"assist\"];\n          payload[\"kill\"] = payload[\"kill_or_assist\"] - payload[\"assist\"];\n          payload[\"death\"] = player[\"result\"][\"death\"];\n          payload[\"special\"] = player[\"result\"][\"special\"];\n          payload[\"signal\"] = player[\"result\"][\"noroshiTry\"];\n          break;\n        }\n      }\n    }\n    payload[\"our_team_inked\"] = battle[\"myTeam\"][\"players\"].reduce((prev, cur) => prev + cur[\"paint\"], 0);\n    payload[\"their_team_inked\"] = battle[\"otherTeams\"][0][\"players\"].reduce((prev, cur) => prev + cur[\"paint\"], 0);\n    if (battle[\"otherTeams\"].length > 1) {\n      payload[\"third_team_inked\"] = battle[\"otherTeams\"][1][\"players\"].reduce((prev, cur) => prev + cur[\"paint\"], 0);\n    }\n\n    \/\/ Result.\n    switch (battle[\"judgement\"]) {\n      case \"WIN\":\n        payload[\"result\"] = \"win\";\n        break;\n      case \"LOSE\":\n      case \"DEEMED_LOSE\":\n        payload[\"result\"] = \"lose\";\n        break;\n      case \"EXEMPTED_LOSE\":\n        payload[\"result\"] = \"exempted_lose\";\n        break;\n      case \"DRAW\":\n        payload[\"result\"] = \"draw\";\n        break;\n    }\n\n    \/\/ Basic info.\n    switch (rule) {\n      case \"TURF_WAR\":\n      case \"TRI_COLOR\":\n        try {\n          payload[\"our_team_percent\"] = battle[\"myTeam\"][\"result\"][\"paintRatio\"] * 100;\n          payload[\"their_team_percent\"] = battle[\"otherTeams\"][0][\"result\"][\"paintRatio\"] * 100;\n          payload[\"third_team_percent\"] = battle[\"otherTeams\"][1][\"result\"][\"paintRatio\"] * 100;\n        } catch {}\n        break;\n      default:\n        try {\n          payload[\"knockout\"] = !battle[\"knockout\"] || battle[\"knockout\"] == \"NEITHER\" ? \"no\" : \"yes\";\n          payload[\"our_team_count\"] = battle[\"myTeam\"][\"result\"][\"score\"];\n          payload[\"their_team_count\"] = battle[\"otherTeams\"][0][\"result\"][\"score\"];\n        } catch {}\n        break;\n    }\n\n    \/\/ Times.\n    payload[\"start_at\"] = Math.floor(new Date(battle[\"playedTime\"]).valueOf() \/ 1000);\n    payload[\"end_at\"] = payload[\"start_at\"] + battle[\"duration\"];\n\n    \/\/ Colors.\n    payload[\"our_team_color\"] = convertColor(battle[\"myTeam\"][\"color\"]);\n    payload[\"their_team_color\"] = convertColor(battle[\"otherTeams\"][0][\"color\"]);\n    if (rule === \"TRI_COLOR\") {\n      payload[\"third_team_color\"] = convertColor(battle[\"otherTeams\"][1][\"color\"]);\n    }\n\n    \/\/ Players.\n    const teams = [battle[\"myTeam\"], ...battle[\"otherTeams\"]];\n    for (let i = 0; i < teams.length; i++) {\n      const team = teams[i];\n      const teamPayload = [];\n      for (const player of team[\"players\"]) {\n        playerPayload = {};\n        playerPayload[\"me\"] = player[\"isMyself\"] ? \"yes\" : \"no\";\n        playerPayload[\"name\"] = player[\"name\"];\n        if (player[\"nameId\"]) {\n          playerPayload[\"number\"] = player[\"nameId\"];\n        }\n        playerPayload[\"splashtag_title\"] = player[\"byname\"];\n        playerPayload[\"weapon\"] = decodeBase64Index(player[\"weapon\"][\"id\"]);\n        playerPayload[\"inked\"] = player[\"paint\"];\n        playerPayload[\"species\"] = player[\"species\"].toLowerCase();\n        playerPayload[\"rank_in_team\"] = i + 1;\n\n        if (player[\"crown\"]) {\n          playerPayload[\"crown_type\"] = \"x\";\n        }\n        switch (player[\"festDragonCert\"]) {\n          case \"DRAGON\":\n            playerPayload[\"crown_type\"] = \"100x\";\n            break;\n          case \"DOUBLE_DRAGON\":\n            playerPayload[\"crown_type\"] = \"333x\";\n            break;\n        }\n\n        if (player[\"result\"]) {\n          playerPayload[\"kill_or_assist\"] = player[\"result\"][\"kill\"];\n          playerPayload[\"assist\"] = player[\"result\"][\"assist\"];\n          playerPayload[\"kill\"] = playerPayload[\"kill_or_assist\"] - playerPayload[\"assist\"];\n          playerPayload[\"death\"] = player[\"result\"][\"death\"];\n          playerPayload[\"special\"] = player[\"result\"][\"special\"];\n          playerPayload[\"signal\"] = player[\"result\"][\"noroshiTry\"];\n          playerPayload[\"disconnected\"] = \"no\";\n          playerPayload[\"crown\"] = player[\"crown\"] ? \"yes\" : \"no\";\n          playerPayload[\"gears\"] = {};\n\n          const Gears = { headGear: \"headgear\", clothingGear: \"clothing\", shoesGear: \"shoes\" };\n          for (const key of Object.keys(Gears)) {\n            const gearPayload = { primary_ability: translateGearAbility(player[key][\"primaryGearPower\"][\"image\"][\"url\"]), secondary_abilities: [] };\n            for (const ability of player[key][\"additionalGearPowers\"]) {\n              gearPayload.secondary_abilities.push(translateGearAbility(ability[\"image\"][\"url\"]));\n            }\n            playerPayload[\"gears\"][Gears[key]] = gearPayload;\n          }\n        } else {\n          playerPayload[\"disconnected\"] = \"yes\";\n        }\n\n        teamPayload.push(playerPayload);\n      }\n\n      switch (i) {\n        case 0:\n          payload[\"our_team_players\"] = teamPayload;\n          break;\n        case 1:\n          payload[\"their_team_players\"] = teamPayload;\n          break;\n        case 2:\n          payload[\"third_team_players\"] = teamPayload;\n          break;\n      }\n    }\n\n    \/\/ Splatfest Battles.\n    if (mode === \"FEST\") {\n      payload[\"our_team_theme\"] = battle[\"myTeam\"][\"festTeamName\"];\n      payload[\"their_team_theme\"] = battle[\"otherTeams\"][0][\"festTeamName\"];\n      switch (battle[\"festMatch\"][\"dragonMatchType\"]) {\n        case \"DECUPLE\":\n          payload[\"fest_dragon\"] = \"10x\";\n          break;\n        case \"DRAGON\":\n          payload[\"fest_dragon\"] = \"100x\";\n          break;\n        case \"DOUBLE_DRAGON\":\n          payload[\"fest_dragon\"] = \"333x\";\n          break;\n      }\n      payload[\"clout_change\"] = battle[\"festMatch\"][\"contribution\"];\n      payload[\"fest_power\"] = battle[\"festMatch\"][\"myFestPower\"];\n\n      if (rule === \"TRI_COLOR\") {\n        payload[\"third_team_theme\"] = battle[\"otherTeams\"][1][\"festTeamName\"];\n\n        payload[\"our_team_role\"] = battle[\"myTeam\"][\"tricolorRole\"] === \"DEFENSE\" ? \"defender\" : \"attacker\";\n        payload[\"their_team_role\"] = battle[\"otherTeams\"][0][\"tricolorRole\"] === \"DEFENSE\" ? \"defender\" : \"attacker\";\n        payload[\"third_team_role\"] = battle[\"otherTeams\"][1][\"tricolorRole\"] === \"DEFENSE\" ? \"defender\" : \"attacker\";\n      }\n    }\n\n    \/\/ Anarchy Battles.\n    \/\/ TODO: fetch overview.\n    if (mode === \"BANKARA\") {\n      payload[\"rank_exp_change\"] = battle[\"bankaraMatch\"][\"earnedUdemaePoint\"];\n\n      try {\n        payload[\"bankara_power_after\"] = battle[\"bankaraMatch\"][\"bankaraPower\"][\"power\"];\n      } catch {}\n    }\n\n    \/\/ X Battles.\n    \/\/ TODO: fetch overview.\n    if (mode === \"X_MATCH\") {\n      if (battle[\"xMatch\"][\"lastXPower\"]) {\n        payload[\"x_power_before\"] = battle[\"xMatch\"][\"lastXPower\"];\n      }\n    }\n\n    \/\/ Challenges.\n    if (mode === \"LEAGUE\") {\n      payload[\"event\"] = battle[\"leagueMatch\"][\"leagueMatchEvent\"][\"id\"];\n      payload[\"event_power\"] = battle[\"leagueMatch\"][\"myLeaguePower\"];\n    }\n\n    \/\/ Medals.\n    const medals = [];\n    for (const medal of battle[\"awards\"]) {\n      medals.push(medal[\"name\"]);\n    }\n    payload[\"medals\"] = medals;\n\n    payload[\"automated\"] = \"yes\";\n    payload[\"splatnet_json\"] = JSON.stringify(battle);\n\n    \/\/ Upload to stat.ink.\n    const url = await upload(\"battle\", id, payload);\n    if (url) {\n      scheduleNotification(url);\n    }\n  }\n}\n\n\/\/ Fetch uploaded jobs.\nconst uploadedJobIds = await getUploaded(\"salmon\");\n\n\/\/ Fetch latest jobs.\nconst jobData = await fetchGraphQl(\"0f8c33970a425683bb1bdecca50a0ca4fb3c3641c0b2a1237aedfde9c0cb2b8f\", {});\nconst jobGroups = jobData[\"coopResult\"][\"historyGroups\"][\"nodes\"];\nconsole.log(`Job groups: ${jobGroups.length}`);\nfor (const group of jobGroups) {\n  const jobNodes = group[\"historyDetails\"][\"nodes\"];\n  console.log(`Job nodes: ${jobNodes.length}`);\n  for (const node of jobNodes) {\n    const id = node[\"id\"];\n    console.log(`Job ID: ${id}`);\n    const uuid = generateUuidV5(\"f1911910-605e-11ed-a622-7085c2057a9d\", Data.fromBase64String(id).toRawString());\n    if (uploadedJobIds.includes(uuid)) {\n      console.log(\"Omit\");\n      continue;\n    }\n\n    const data = await fetchGraphQl(\"f2d55873a9281213ae27edc171e2b19131b3021a2ae263757543cdd3bf015cc8\", { coopHistoryDetailId: id });\n\n    \/\/ Format payload for job.\n    const job = data[\"coopHistoryDetail\"];\n    const payload = {};\n\n    \/\/ UUID.\n    payload[\"uuid\"] = uuid;\n\n    \/\/ Rule.\n    const rule = job[\"rule\"];\n    switch (rule) {\n      case \"PRIVATE_CUSTOM\":\n      case \"PRIVATE_SCENARIO\":\n        payload[\"private\"] = \"yes\";\n        break;\n      default:\n        if (job[\"jobPoint\"] === null) {\n          payload[\"private\"] = \"yes\";\n        } else {\n          payload[\"private\"] = \"no\";\n        }\n        break;\n    }\n    payload[\"big_run\"] = rule === \"BIG_RUN\" ? \"yes\" : \"no\";\n    payload[\"eggstra_work\"] = rule === \"TEAM_CONTEST\" ? \"yes\" : \"no\";\n\n    \/\/ Stage.\n    payload[\"stage\"] = decodeBase64Index(job[\"coopStage\"][\"id\"]);\n\n    \/\/ Basic info.\n    if (rule !== \"TEAM_CONTEST\") {\n      payload[\"danger_rate\"] = job[\"dangerRate\"] * 100;\n    }\n    payload[\"king_smell\"] = job[\"smellMeter\"];\n    payload[\"job_score\"] = job[\"jobScore\"];\n    payload[\"job_rate\"] = job[\"jobRate\"];\n    payload[\"job_bonus\"] = job[\"jobBonus\"];\n    payload[\"job_point\"] = job[\"jobPoint\"];\n\n    \/\/ Wave.\n    const wavesCleared = job[\"resultWave\"] - 1;\n    const maxWaves = rule === \"TEAM_CONTEST\" ? 5 : 3;\n    payload[\"clear_waves\"] = wavesCleared === -1 ? maxWaves : wavesCleared;\n    if (payload[\"clear_waves\"] < 0) {\n      payload[\"clear_waves\"] = null;\n    } else if (payload[\"clear_waves\"] !== maxWaves) {\n      const lastWave = job[\"waveResults\"][payload[\"clear_waves\"]];\n      if (lastWave[\"teamDeliverCount\"] >= lastWave[\"deliverNorm\"]) {\n        payload[\"fail_reason\"] = \"wipe_out\";\n      }\n    }\n\n    \/\/ Xtrawave.\n    if (job[\"bossResult\"]) {\n      payload[\"king_salmonid\"] = decodeBase64Index(job[\"bossResult\"][\"boss\"][\"id\"]);\n      payload[\"clear_extra\"] = job[\"bossResult\"][\"hasDefeatBoss\"] ? \"yes\" : \"no\";\n    }\n\n    \/\/ Title.\n    if (payload[\"private\"] !== \"yes\" && rule !== \"TEAM_CONTEST\") {\n      payload[\"title_after\"] = decodeBase64Index(job[\"afterGrade\"][\"id\"]);\n      payload[\"title_exp_after\"] = job[\"afterGradePoint\"];\n    }\n\n    \/\/ Eggs.\n    let goldenEggs = 0;\n    let powerEggs = job[\"myResult\"][\"deliverCount\"];\n    for (const player in job[\"memberResults\"]) {\n      powerEggs += player[\"deliverCount\"];\n    }\n    for (const wave of job[\"waveResults\"]) {\n      goldenEggs += wave[\"teamDeliverCount\"] ?? 0;\n    }\n    payload[\"golden_eggs\"] = goldenEggs;\n    payload[\"power_eggs\"] = powerEggs;\n\n    \/\/ Scales.\n    if (job[\"scale\"]) {\n      payload[\"gold_scale\"] = job[\"scale\"][\"gold\"];\n      payload[\"silver_scale\"] = job[\"scale\"][\"silver\"];\n      payload[\"bronze_scale\"] = job[\"scale\"][\"bronze\"];\n    }\n\n    \/\/ Players.\n    payload[\"players\"] = [];\n    const memberResults = [job[\"myResult\"], ...job[\"memberResults\"]];\n    for (let i = 0; i < memberResults.length; i++) {\n      const player = memberResults[i];\n      const playerPayload = {};\n      playerPayload[\"me\"] = i === 0 ? \"yes\" : \"no\";\n      playerPayload[\"name\"] = player[\"player\"][\"name\"];\n      playerPayload[\"number\"] = player[\"player\"][\"nameId\"];\n      playerPayload[\"splashtag_title\"] = player[\"player\"][\"byname\"];\n      playerPayload[\"golden_eggs\"] = player[\"goldenDeliverCount\"];\n      playerPayload[\"golden_assist\"] = player[\"goldenAssistCount\"];\n      playerPayload[\"power_eggs\"] = player[\"deliverCount\"];\n      playerPayload[\"rescue\"] = player[\"rescueCount\"];\n      playerPayload[\"rescued\"] = player[\"rescuedCount\"];\n      playerPayload[\"defeat_boss\"] = player[\"defeatEnemyCount\"];\n      playerPayload[\"species\"] = player[\"player\"][\"species\"].toLowerCase();\n\n      if (!playerPayload[\"golden_eggs\"] && !playerPayload[\"power_eggs\"] && !playerPayload[\"rescue\"] && !playerPayload[\"rescued\"] && !playerPayload[\"defeat_boss\"]) {\n        playerPayload[\"disconnected\"] = \"yes\";\n      } else {\n        playerPayload[\"disconnected\"] = \"no\";\n      }\n\n      playerPayload[\"uniform\"] = decodeBase64Index(player[\"player\"][\"uniform\"][\"id\"]);\n\n      if (player[\"specialWeapon\"]) {\n        const SpecialWeapons = {\n          20006: \"nicedama\",\n          20007: \"hopsonar\",\n          20009: \"megaphone51\",\n          20010: \"jetpack\",\n          20012: \"kanitank\",\n          20013: \"sameride\",\n          20014: \"tripletornado\",\n          20017: \"teioika\",\n          20018: \"ultra_chakuchi\",\n        };\n        const specialId = player[\"specialWeapon\"][\"weaponId\"];\n        playerPayload[\"special\"] = SpecialWeapons[specialId];\n      }\n\n      playerPayload[\"weapons\"] = player[\"weapons\"].map((weapon) => translateWeapon(weapon[\"image\"][\"url\"]));\n      for (const weapon of player[\"weapons\"]) {\n        if (weapon[\"image\"][\"url\"].includes(\"473fffb2442075078d8bb7125744905abdeae651b6a5b7453ae295582e45f7d1\")) {\n        }\n      }\n\n      payload[\"players\"].push(playerPayload);\n    }\n\n    \/\/ Waves.\n    payload[\"waves\"] = [];\n    for (let i = 0; i < job[\"waveResults\"].length; i++) {\n      const wave = job[\"waveResults\"][i];\n      const wavePayload = {};\n      switch (wave[\"waterLevel\"]) {\n        case 0:\n          wavePayload[\"tide\"] = \"low\";\n          break;\n        case 1:\n          wavePayload[\"tide\"] = \"normal\";\n          break;\n        case 2:\n          wavePayload[\"tide\"] = \"high\";\n          break;\n      }\n      wavePayload[\"golden_quota\"] = wave[\"deliverNorm\"];\n      wavePayload[\"golden_delivered\"] = wave[\"teamDeliverCount\"];\n      wavePayload[\"golden_appearances\"] = wave[\"goldenPopCount\"];\n\n      if (rule === \"TEAM_CONTEST\") {\n        let dangerRate = 60;\n        if (i > 0) {\n          const prev = payload[\"waves\"][payload[\"waves\"].length - 1];\n          dangerRate = prev[\"danger_rate\"];\n          const quota = prev[\"golden_quota\"];\n          const delivered = prev[\"golden_delivered\"];\n          switch (payload[\"players\"].length) {\n            case 1:\n              if (delivered >= quota * 2) {\n                dangerRate += 10;\n              } else if (delivered >= quota * 1.5) {\n                dangerRate += 5;\n              }\n              break;\n            case 2:\n              if (delivered >= quota * 2) {\n                dangerRate += 20;\n              } else if (delivered >= quota * 1.5) {\n                dangerRate += 10;\n              }\n              break;\n            case 3:\n              if (delivered >= quota * 2) {\n                dangerRate += 40;\n              } else if (delivered >= quota * 1.5) {\n                dangerRate += 20;\n              }\n              break;\n            case 4:\n              if (delivered >= quota * 2) {\n                dangerRate += 60;\n              } else if (delivered >= quota * 1.5) {\n                dangerRate += 30;\n              }\n              break;\n          }\n          wavePayload[\"danger_rate\"] = dangerRate;\n        }\n      }\n\n      if (wave[\"eventWave\"]) {\n        const Events = { 1: \"rush\", 2: \"goldie_seeking\", 3: \"the_griller\", 4: \"the_mothership\", 5: \"fog\", 6: \"cohock_charge\", 7: \"giant_tornado\", 8: \"mudmouth_eruption\" };\n        const eventId = decodeBase64Index(wave[\"eventWave\"][\"id\"]);\n        wavePayload[\"event\"] = Events[eventId];\n      }\n\n      const SpecialWeapons = {\n        20006: \"nicedama\",\n        20007: \"hopsonar\",\n        20009: \"megaphone51\",\n        20010: \"jetpack\",\n        20012: \"kanitank\",\n        20013: \"sameride\",\n        20014: \"tripletornado\",\n        20017: \"teioika\",\n        20018: \"ultra_chakuchi\",\n      };\n      const SpecialWeaponUsage = {\n        nicedama: 0,\n        hopsonar: 0,\n        megaphone51: 0,\n        jetpack: 0,\n        kanitank: 0,\n        sameride: 0,\n        tripletornado: 0,\n        teioika: 0,\n        ultra_chakuchi: 0,\n      };\n      for (const specialWeapon of wave[\"specialWeapons\"]) {\n        const id = decodeBase64Index(specialWeapon[\"id\"]);\n        const key = SpecialWeapons[id];\n        SpecialWeaponUsage[key]++;\n      }\n      wavePayload[\"special_uses\"] = SpecialWeaponUsage;\n\n      payload[\"waves\"].push(wavePayload);\n    }\n\n    \/\/ Boss Salmonid.\n    const BossSalmonids = {\n      4: \"bakudan\",\n      5: \"katapad\",\n      6: \"teppan\",\n      7: \"hebi\",\n      8: \"tower\",\n      9: \"mogura\",\n      10: \"koumori\",\n      11: \"hashira\",\n      12: \"diver\",\n      13: \"tekkyu\",\n      14: \"nabebuta\",\n      15: \"kin_shake\",\n      17: \"grill\",\n      20: \"doro_shake\",\n    };\n    payload[\"bosses\"] = {};\n    for (const result of job[\"enemyResults\"]) {\n      const id = decodeBase64Index(result[\"enemy\"][\"id\"]);\n      const key = BossSalmonids[id];\n      payload[\"bosses\"][key] = {\n        appearances: result[\"popCount\"],\n        defeated: result[\"teamDefeatCount\"],\n        defeated_by_me: result[\"defeatCount\"],\n      };\n    }\n\n    \/\/ Time.\n    payload[\"start_at\"] = Math.floor(new Date(job[\"playedTime\"]).valueOf() \/ 1000);\n\n    payload[\"automated\"] = \"yes\";\n    payload[\"splatnet_json\"] = JSON.stringify(job);\n\n    \/\/ Upload to stat.ink.\n    const url = await upload(\"salmon\", id, payload);\n    if (url) {\n      scheduleNotification(url);\n    }\n  }\n}\n\nlet alert = new Alert();\nalert.title = \"Uploaded Successfully\";\nalert.message = \"s3s3 has uploaded your results to stat.ink.\";\nalert.addAction(\"Open stat.ink\");\nalert.addCancelAction(\"OK\");\nconst res = await alert.present();\nif (res === 0) {\n  await Safari.openInApp(\"https:\/\/stat.ink\/\");\n}\n\nfunction parseBulletToken() {\n  let b64Str = args.queryParameters[\"requestHeaders\"].replaceAll(\"-\", \"+\").replaceAll(\"_\", \"\/\");\n  if (b64Str.length % 4 !== 0) {\n    for (let i = 0; i < 4 - (b64Str.length % 4); i++) {\n      b64Str = b64Str + \"=\";\n    }\n  }\n  const data = Data.fromBase64String(b64Str);\n  const str = data.toRawString();\n  const re = \/Authorization: Bearer (.*)\\r\\n\/g;\n  const match = re.exec(str);\n  const token = match?.[1] ?? \"\";\n  console.log(`Bullet token: ${token}`);\n  return token;\n}\n\nasync function checkUpdate() {\n  const req = new Request(\"https:\/\/raw.githubusercontent.com\/zhxie\/s3s3\/master\/s3s3.js\");\n  const str = await req.loadString();\n  const re = \/A_VERSION = \"([\\d.]*)\"\/g;\n  const match = re.exec(str);\n  const version = match?.[1] ?? \"\";\n  console.log(`s3s3 version: ${version}`);\n\n  if (version !== \"\" && version !== A_VERSION) {\n    let alert = new Alert();\n    alert.title = \"New Version Available\";\n    alert.message = `There is a new version (${version}) of s3s3. Please update s3s3 to the latest version as soon as possible.`;\n    alert.addCancelAction(\"OK\");\n    await alert.present();\n  }\n  return version;\n}\n\nasync function updateSplatnetVersion() {\n  const req = new Request(\"https:\/\/cdn.jsdelivr.net\/gh\/nintendoapis\/nintendo-app-versions\/data\/splatnet3-app.json\");\n  const json = await req.loadJSON();\n  const version = json[\"web_app_ver\"] ?? \"\";\n  console.log(`SplatNet version: ${version}`);\n  return version;\n}\n\nasync function fetchGraphQl(hash, variables) {\n  const req = new Request(\"https:\/\/api.lp1.av5ja.srv.nintendo.net\/api\/graphql\");\n  req.method = \"POST\";\n  \/\/ TODO: complete headers.\n  \/\/ HACK: there are only minimum required headers. Some headers has been removed which may lead to potential issues.\n  req.headers = {\n    \"Accept-Language\": LANG,\n    Authorization: `Bearer ${BULLET_TOKEN}`,\n    \"Content-Type\": \"application\/json\",\n    \"X-Requested-With\": \"com.nintendo.znca\",\n    \"X-Web-View-Ver\": SPLATNET_VERSION,\n  };\n  req.body = JSON.stringify({\n    extensions: {\n      persistedQuery: {\n        sha256Hash: hash,\n        version: 1,\n      },\n    },\n    variables: variables,\n  });\n  const json = await req.loadJSON();\n  return json[\"data\"];\n}\n\nasync function getUploaded(path) {\n  const req = new Request(`https:\/\/stat.ink\/api\/v3\/${path}\/uuid-list`);\n  req.headers = { Authorization: `Bearer ${API_KEY}` };\n  const json = await req.loadJSON();\n  return json;\n}\n\nfunction generateUuidV5(namespace, name) {\n  function sha1(message) {\n    function rotateLeft(n, s) {\n      return (n << s) | (n >>> (32 - s));\n    }\n\n    const length = message.length * 8;\n    const words = [];\n    for (let i = 0; i < message.length; i++) {\n      words[i >> 2] |= message[i] << (24 - (i % 4) * 8);\n    }\n    words[length >> 5] |= 0x80 << (24 - (length % 32));\n    words[(((length + 64) >> 9) << 4) + 15] = length;\n\n    let h0 = 0x67452301;\n    let h1 = 0xefcdab89;\n    let h2 = 0x98badcfe;\n    let h3 = 0x10325476;\n    let h4 = 0xc3d2e1f0;\n\n    for (let i = 0; i < words.length; i += 16) {\n      const w = new Array(80);\n      for (let t = 0; t < 16; t++) {\n        w[t] = words[i + t] || 0;\n      }\n      for (let t = 16; t < 80; t++) {\n        w[t] = rotateLeft(w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16], 1);\n      }\n\n      let a = h0,\n        b = h1,\n        c = h2,\n        d = h3,\n        e = h4;\n\n      for (let t = 0; t < 80; t++) {\n        let f, k;\n        if (t < 20) {\n          f = (b & c) | (~b & d);\n          k = 0x5a827999;\n        } else if (t < 40) {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        } else if (t < 60) {\n          f = (b & c) | (b & d) | (c & d);\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n\n        const temp = (rotateLeft(a, 5) + f + e + k + w[t]) >>> 0;\n        e = d;\n        d = c;\n        c = rotateLeft(b, 30);\n        b = a;\n        a = temp;\n      }\n\n      h0 = (h0 + a) >>> 0;\n      h1 = (h1 + b) >>> 0;\n      h2 = (h2 + c) >>> 0;\n      h3 = (h3 + d) >>> 0;\n      h4 = (h4 + e) >>> 0;\n    }\n\n    const hash = new Uint8Array(20);\n    [h0, h1, h2, h3, h4].forEach((h, i) => {\n      hash[i * 4 + 0] = (h >>> 24) & 0xff;\n      hash[i * 4 + 1] = (h >>> 16) & 0xff;\n      hash[i * 4 + 2] = (h >>> 8) & 0xff;\n      hash[i * 4 + 3] = h & 0xff;\n    });\n    return hash;\n  }\n\n  const namespaceBytes = namespace\n    .replace(\/-\/g, \"\")\n    .match(\/.{1,2}\/g)\n    .map((byte) => parseInt(byte, 16));\n  const nameBytes = Array.from(name).map((e) => e.charCodeAt(0));\n  const combinedBytes = new Uint8Array(namespaceBytes.length + nameBytes.length);\n\n  combinedBytes.set(namespaceBytes);\n  combinedBytes.set(nameBytes, namespaceBytes.length);\n\n  const hashBytes = sha1(combinedBytes);\n  const uuidBytes = hashBytes.slice(0, 16);\n\n  uuidBytes[6] = (uuidBytes[6] & 0x0f) | 0x50;\n  uuidBytes[8] = (uuidBytes[8] & 0x3f) | 0x80;\n\n  const hex = Array.from(uuidBytes)\n    .map((e) => e.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n  const uuid = `${hex.substr(0, 8)}-${hex.substr(8, 4)}-${hex.substr(12, 4)}-${hex.substr(16, 4)}-${hex.substr(20)}`;\n  return uuid;\n}\n\nasync function upload(path, id, payload) {\n  payload[\"test\"] = TEST_MODE ? \"yes\" : \"no\";\n  payload[\"agent\"] = \"s3s3\";\n  payload[\"agent_version\"] = `v${A_VERSION}`;\n\n  const req = new Request(`https:\/\/stat.ink\/api\/v3\/${path}`);\n  req.method = \"POST\";\n  req.headers = { Authorization: `Bearer ${API_KEY}`, \"Content-Type\": \"application\/json\" };\n  req.body = JSON.stringify(payload);\n  const json = await req.loadJSON();\n  if (json[\"status\"]) {\n    let alert = new Alert();\n    alert.title = \"Failed to Upload\";\n    alert.message = `s3s3 cannot upload ${id} to stat.ink. ${JSON.stringify(json[\"message\"])}`;\n    alert.addCancelAction(\"OK\");\n    await alert.present();\n  } else if (json[\"error\"]) {\n    let alert = new Alert();\n    alert.title = \"Failed to Upload\";\n    alert.message = `s3s3 cannot upload ${id} to stat.ink. Please file a bug on https:\/\/github.com\/zhxie\/s3s3\/issues. \\n\\n${JSON.stringify(json[\"error\"])}`;\n    alert.addAction(\"Copy to Clipboard\");\n    alert.addCancelAction(\"OK\");\n    const res = await alert.present();\n    if (res === 0) {\n      Pasteboard.copy(JSON.stringify(payload));\n    }\n  } else {\n    console.log(`Uploaded to: ${json[\"url\"]}`);\n    return json[\"url\"];\n  }\n}\n\nasync function scheduleNotification(url) {\n  const notification = new Notification();\n  notification.title = \"Result Uploaded\";\n  notification.body = `New result uploaded to ${url}.`;\n  await notification.schedule();\n}\n\nfunction decodeBase64Index(b64Str) {\n  let str = Data.fromBase64String(b64Str).toRawString();\n  str = str.replaceAll(\"VsStage-\", \"\");\n  str = str.replaceAll(\"VsMode-\", \"\");\n  str = str.replaceAll(\"SpecialWeapon-\", \"\");\n  str = str.replaceAll(\"Weapon-\", \"\");\n  str = str.replaceAll(\"CoopStage-\", \"\");\n  str = str.replaceAll(\"CoopGrade-\", \"\");\n  str = str.replaceAll(\"CoopEnemy-\", \"\");\n  str = str.replaceAll(\"CoopEventWave-\", \"\");\n  str = str.replaceAll(\"CoopUniform-\", \"\");\n  return str;\n}\n\nfunction convertColor(color) {\n  const r = Math.floor(255 * color[\"r\"])\n    .toString(16)\n    .padStart(2, \"0\");\n  const g = Math.floor(255 * color[\"g\"])\n    .toString(16)\n    .padStart(2, \"0\");\n  const b = Math.floor(255 * color[\"b\"])\n    .toString(16)\n    .padStart(2, \"0\");\n  const a = Math.floor(255 * color[\"a\"])\n    .toString(16)\n    .padStart(2, \"0\");\n  return `${r}${g}${b}${a}`;\n}\n\nfunction translateGearAbility(url) {\n  const Abilities = {\n    \"5c98cc37d2ce56291a7e430459dc9c44d53ca98b8426c5192f4a53e6dd6e4293\": \"ink_saver_main\",\n    \"11293d8fe7cfb82d55629c058a447f67968fc449fd52e7dd53f7f162fa4672e3\": \"ink_saver_sub\",\n    \"29b845ea895b931bfaf895e0161aeb47166cbf05f94f04601769c885d019073b\": \"ink_recovery_up\",\n    \"3b6c56c57a6d8024f9c7d6e259ffa2e2be4bdf958653b834e524ffcbf1e6808e\": \"run_speed_up\",\n    \"087ffffe40c28a40a39dc4a577c235f4cc375540c79dfa8ede1d8b63a063f261\": \"swim_speed_up\",\n    e8668a2af7259be74814a9e453528a3e9773435a34177617a45bbf79ad0feb17: \"special_charge_up\",\n    e3154ab67494df2793b72eabf912104c21fbca71e540230597222e766756b3e4: \"special_saver\",\n    fba267bd56f536253a6bcce1e919d8a48c2b793c1b554ac968af8d2068b22cab: \"special_power_up\",\n    aaa9b7e95a61bfd869aaa9beb836c74f9b8d4e5d4186768a27d6e443c64f33ce: \"quick_respawn\",\n    \"138820ed46d68bdf2d7a21fb3f74621d8fc8c2a7cb6abe8d7c1a3d7c465108a7\": \"quick_super_jump\",\n    \"9df9825e470e00727aa1009c4418cf0ace58e1e529dab9a7c1787309bb25f327\": \"sub_power_up\",\n    db36f7e89194ed642f53465abfa449669031a66d7538135c703d3f7d41f99c0d: \"ink_resistance_up\",\n    \"664489b24e668ef1937bfc9a80a8cf9cf4927b1e16481fa48e7faee42122996d\": \"sub_resistance_up\",\n    \"1a0c78a1714c5abababd7ffcba258c723fefade1f92684aa5f0ff7784cc467d0\": \"intensify_action\",\n    \"85d97cd3d5890b80e020a554167e69b5acfa86e96d6e075b5776e6a8562d3d4a\": \"opening_gambit\",\n    d514787f65831c5121f68b8d96338412a0d261e39e522638488b24895e97eb88: \"last_ditch_effort\",\n    aa5b599075c3c1d27eff696aeded9f1e1ddf7ae3d720268e520b260db5600d60: \"tenacity\",\n    \"748c101d23261aee8404c573a947ffc7e116a8da588c7371c40c4f2af6a05a19\": \"comeback\",\n    \"2c0ef71abfb3efe0e67ab981fc9cd46efddcaf93e6e20da96980079f8509d05d\": \"ninja_squid\",\n    de15cad48e5f23d147449c70ee4e2973118959a1a115401561e90fc65b53311b: \"haunt\",\n    \"56816a7181e663b5fedce6315eb0ad538e0aadc257b46a630fcfcc4a16155941\": \"thermal_ink\",\n    de0d92f7dfed6c76772653d6858e7b67dd1c83be31bd2324c7939105180f5b71: \"respawn_punisher\",\n    \"0d6607b6334e1e84279e482c1b54659e31d30486ef0576156ee0974d8d569dbc\": \"ability_doubler\",\n    f9c21eacf6dbc1d06edbe498962f8ed766ab43cb1d63806f3731bf57411ae7b6: \"stealth_jump\",\n    \"9d982dc1a7a8a427d74df0edcebcc13383c325c96e75af17b9cdb6f4e8dafb24\": \"object_shredder\",\n    \"18f03a68ee64da0a2e4e40d6fc19de2e9af3569bb6762551037fd22cf07b7d2d\": \"drop_roller\",\n    dc937b59892604f5a86ac96936cd7ff09e25f18ae6b758e8014a24c7fa039e91: null,\n  };\n\n  for (const key of Object.keys(Abilities)) {\n    if (url.includes(key)) {\n      return Abilities[key];\n    }\n  }\n}\n\nfunction translateWeapon(url) {\n  const Weapons = {\n    \"6e58a0747ab899badcb6f351512c6034e0a49bd6453281f32c7f550a2132fd65\": 0,\n    \"8e134a80cd54f4235329493afd43ff754b367a65e460facfcca862b174754b0e\": 10,\n    \"25e98eaba1e17308db191b740d9b89e6a977bfcd37c8dc1d65883731c0c72609\": 20,\n    \"5ec00bcf96c7a3f731d7a2e67f60f802f33d22f07177b94d5905f471b08b629f\": 30,\n    \"01e8399a3c56707b6e9f7500d3d583ba1d400eec06449d8fe047cda1956a4ccc\": 50,\n    e3874d7d504acf89488ad7f68d29a348caea1a41cd43bd9a272069b0c0466570: 40,\n    e6dbf73aa6ff9d1feb61fcabadb2d31e08b228a9736b4f5d8a5baeab9b493255: 60,\n    \"5607f7014bbc7339feeb67218c05ef19c7a466152b1bd056a899b955127ea433\": 70,\n    fe2b351799aa48fcb48154299ff0ccf0b0413fc291ffc49456e93db29d2f1db5: 80,\n    \"035920eb9428955c25aecb8a56c2b1b58f3e322af3657d921db1778de4b80c59\": 90,\n    \"8034dd1acde77c1a2df32197c12faa5ba1d65b43d008edd1b40f16fa8d106944\": 100,\n    \"10d4a1584d1428cb164ddfbc5febc9b1e77fd05e2e9ed9de851838a94d202c15\": 200,\n    \"29ccca01285a04f42dc15911f3cd1ee940f9ca0e94c75ba07378828afb3165c0\": 210,\n    \"0d2963b386b6da598b8da1087eab3f48b99256e2e6a20fc8bbe53b34579fb338\": 220,\n    be8ba95bd3017a83876e7f769ee37ee459ee4b2d6eca03fceeb058c510adbb61: 230,\n    \"0a929d514403d07e1543e638141ebace947ffd539f5f766b42f4d6577d40d7b8\": 240,\n    \"954a5ea059f841fa5f1cd2596bb32f23b3d3b03fc3fa7972077bdbafe6051215\": 250,\n    \"3f8b7fb5cfa592fd251fe4f5707465e539ed79b8d4ae17df75198fbabec2e88f\": 260,\n    \"96833fc0f74242cd2bc73b241aab8a00d499ce9f6557722ef6503e12af8979f4\": 300,\n    \"418d75d9ca0304922f06eff539c511238b143ef8331969e20d54a9560df57d5a\": 310,\n    db9f2ff8fab9f74c05c7589d43f132eacbff94154dcc20e09c864fced36d4d95: 400,\n    \"29358fd25b6ad1ba9e99f5721f0248af8bde7f1f757d00cbbc7a8a6be02a880d\": 1000,\n    \"536b28d9dd9fc6633a4bea4a141d63942a0ba3470fc504e5b0d02ee408798a87\": 1010,\n    \"18fdddee9c918842f076c10f12e46d891aca302d2677bf968ee2fe4e65b831a8\": 1020,\n    \"8351e99589f03f49b5d681d36b083aaffd9c486a0558ab957ac44b0db0bb58bb\": 1030,\n    \"137559b59547c853e04c6cc8239cff648d2f6b297edb15d45504fae91dfc9765\": 1040,\n    \"260428edbf919f5c9e8c8517516d6a7a8133cf7348d216768ab4fb9434053f08\": 1100,\n    ce0bb38588e497586a60f16e0aca914f181f42be29953742fd4a55a97e2ebd22: 1110,\n    c1f1f56982bd7d28714615a69da6e33c5157ec22b1c62092ec8d60a67b6b29ef: 1120,\n    \"0cdd6036a6677d68bf28e1014b09a6f5a043e969027e532cd008049baace6527\": 2000,\n    \"3f99800b569e286305669b7ab28dc3ff0f0b1b015600569d5ac30ab8a97047a0\": 2010,\n    f6354a66c47ec15517bb457e3c48c97c3ff62d34ff38879dbb3e1665dea1be5a: 2020,\n    ed294b2c7b3111988d577d7efddb9e5e475efc5e0932e5416efedc41fd98eb04: 2030,\n    ebc007b2f27b0813f0c9ce7371bdab78c62e6a05777c928bf34222a79d99de8f: 2040,\n    \"9c71334ea792864a00531040e0d05a183512e11277fd1fa681170874ba039268\": 2050,\n    \"2b349390a464710982d7e1496130898e7b5a66c301aa44fc9e19332d42e360ad\": 2060,\n    \"082489b182fbbabddde40831dac5867d6acc4778b6a38d8f5c8d445455d638eb\": 2070,\n    \"4a8bf6b4ad3b2942728bbd270bf64d5848b64f3c843a3b12ef83c0ebb5de1b3d\": 3000,\n    f3dbd98d5b0e89f7be7eff25a5c63a06045fe64d8ffd5886e79c855e16791563: 3010,\n    bd2eca9a7b4109c1d96e804c74aaf2ca525011e1348d0b312fe4f034e35e5d4c: 3020,\n    \"0199e455872acba1ab8ef0040eca7f41afca48c1f9ad2c5d274323d6dbc49133\": 3030,\n    \"1e32f5e1e65793585f6423e4fcae1a146a79d2a09e6e15575015af8a2032a4fe\": 3040,\n    \"1cf241ee28b282db23d25f1cce3d586151b9b67f4ba20cf5e2e74c82e988c352\": 3050,\n    \"32dbc48e000d5d2015468e1dafc05e7c24581a73e54e758af0c8b9e2db3db550\": 4000,\n    fd06f01742a3b25ac57941150b3b81d56633831902f2da1f19a6244f2d8dd6fd: 4010,\n    \"34fe0401b6f6a0b09839696fc820ece9570a9d56e3a746b65f0604dec91a9920\": 4020,\n    \"206dbf3b5dfc9962b6a783acf68a856f0c8fbf0c56257c2ca5c25d63198dd6e1\": 4030,\n    be4316928f4b031b470ec2cc2c48fb922a303c882802e32d7fa802249edaa212: 4040,\n    \"7f0192b8786a6fa7d5ed993022b1667de2fd90dadd8d34a3a7dff9578d34fa0a\": 4050,\n    f1c8fc32bd90fc9258dc17e9f9bcfd5e6498f6e283709bf1896b78193b8e39e9: 5000,\n    b43978029ea582de3aca34549cafd810df20082b94104634093392e11e30d9bd: 5010,\n    \"802d3d501738c620b4f709203ccad343490bd3340b2fda21eb38a362320dc6ed\": 5020,\n    b8f50833f99b0db251dc1812e5d13df09b393635b9b6bd684525112cbb38e5e4: 5030,\n    e68609e51d30dfb13e1ea996e46995ed1f7cf561caef0fe96314966d0a039109: 5040,\n    d6d8c3bce9bd3934a5900642cb6f87c7e340e39cccfde1f8f28ce17e3a1769b0: 5050,\n    \"15d101d0d11acbb8159e2701282879f2617d90c8573fd2f2239807721ff54ca4\": 6000,\n    a7b1903741696c0ebeda76c9e16fa0a81ae4e37f5331ad6282fc2be1ae1c1c59: 6010,\n    \"7508ba286e5ac5befe63daea807ab54996c3f0ef3577be9ab5d2827c49dedd75\": 6020,\n    \"1e62c90d72a8c11a91ca85be6fe6a3042514e1d77bd01ed65c22ef8e7256809a\": 6030,\n    \"676d9f49276f171a93ac06646c0fbdfbeb8c3d0284a057aee306404a6034ffef\": 7010,\n    \"9baac6cc774d0e6f2ac8f6e217d700e6f1f47320130598c5f1e922210ccdcc89\": 7020,\n    \"14e5480dcebea47ee9843a1fe5e21f468f0ebc4dbaef04df4ff7930edddd2dac\": 7030,\n    ddd2a4258a70cdaf8a1dbc0ded024db497445d71f950fe7645fa8c69a178a082: 8000,\n    \"3aa72d418643038a9e3248af734b0d6a0bf3d3bf9793d75912b1b959f93c2258\": 8010,\n    \"7175449ebf69cd8c6125538e08682750b71f39403dc0ca336d58c64a48c4cc18\": 8020,\n    \"0962405d6aecff4a075c46e895c42984e33b26c4b2b4b25c5058366db3c35ba4\": 20900,\n    ea9dd38bbce1cd8b879f59b5afc97a47d79cd413ad8d2fcbb504a2ac8f01036e: 21900,\n    \"5cc158250a207241f51d767a47bbb6139fe1c4fb652cc182b73aac93baa659c5\": 22900,\n    bf89bcf3d3a51badd78b436266e6b7927d99ac386e083023df3551da6b39e412: 23900,\n    \"411abcfee82b63a97af1613885b90daa449f4a847eff6c1d7f093b705040a9f0\": 25900,\n    \"3380019464e3111a0f40e633be25f73ad34ec1844d2dc7852a349b29b238932b\": 26900,\n    \"36e03d8d1e6bc4f7449c5450f4410c6c8449cde0548797d22ab641cd488d2060\": 27900,\n    \"480bc1dfb0beed1ce4625a6a6b035e4bac711de019bb9b0e5125e4e7e39e0719\": 28900,\n  };\n  for (const key of Object.keys(Weapons)) {\n    if (url.includes(key)) {\n      return Weapons[key];\n    }\n  }\n}\n",
  "share_sheet_inputs" : [

  ]
}